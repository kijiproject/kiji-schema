/**
 * (c) Copyright 2012 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kiji.schema;

import java.util.Map;

import com.google.common.base.Preconditions;

import org.apache.hadoop.hbase.util.Bytes;

import org.kiji.schema.avro.*;
import org.kiji.schema.impl.FormattedEntityId;
import org.kiji.schema.impl.RawEntityId;

/**
 * Factory class for creating EntityIds.
 *
 * Light-weight object, so as many can be created as needed.
 */
public abstract class EntityIdFactory {

  /**
   * Creates an entity ID factory for the specified row key format.
   *
   * @param format Row key format that determines the type of EntityIdFactory that's created
   * @return a new entity ID factory for the specified row key format.
   */
  public static EntityIdFactory create(RowKeyFormat format) {
    Preconditions.checkNotNull(format);
    switch (format.getEncoding()) {
    case RAW:
      return new RawEntityIdFactory(format);
    case FORMATTED:
      return new FormattedEntityIdFactory(format);
    default:
      throw new RuntimeException(String.format("Unknown row key format: '%s'.", format));
    }
  }

  /** Factory for raw entity IDs. */
  private static final class RawEntityIdFactory extends EntityIdFactory {
    /**
     * Creates a RawEntityIdFactory.
     *
     * @param format Row key format.
     */
    private RawEntityIdFactory(RowKeyFormat format) {
      super(format);
      Preconditions.checkArgument(format.getEncoding() == RowKeyEncoding.RAW);
    }

    /** {@inheritDoc} */
    @Override
    public EntityId fromKijiRowKey(Object kijiRowKey) {
      if (kijiRowKey.getClass() == String.class) {
        return RawEntityId.fromKijiRowKey(Bytes.toBytes(String.valueOf(kijiRowKey)));
      } else if (kijiRowKey instanceof byte[]) {
        return RawEntityId.fromKijiRowKey((byte[])kijiRowKey);
      } else {
        throw new RuntimeException("Invalid RAW kiji Row Key");
      }
    }

    /** {@inheritDoc} */
    @Override
    public EntityId fromHBaseRowKey(byte[] hbaseRowKey) {
      return RawEntityId.fromHBaseRowKey(hbaseRowKey);
    }
  }

  /** Factory for formatted entity IDs. */
  private static final class FormattedEntityIdFactory extends EntityIdFactory {
    /**
     * Creates a FormattedEntityIdFactory.
     * @param format The row key format as specified in the layout file.
     */
    private FormattedEntityIdFactory(RowKeyFormat format) {
      super(format);
      Preconditions.checkArgument(format.getEncoding() == RowKeyEncoding.FORMATTED);
      // Ensure that components of type HASH have valid target components
      for (StorageEncoding enc:format.getEncodedKeySpec()) {
        if (enc.getTransform() == KeyTransform.HASH) {
          if (!format.getKeySpec().containsKey(enc.getTarget())) {
            throw new RuntimeException(enc.getTarget() + " is not a valid Component name");
          }
        }
      }
    }

    /** {@inheritDoc} */
    @Override
    @SuppressWarnings("unchecked")
    public EntityId fromKijiRowKey(Object componentValues) {
      // The user specified the row key in terms of a map of component values.
      Preconditions.checkNotNull(componentValues);
      Preconditions.checkArgument(componentValues instanceof Map);
      return FormattedEntityId.fromKijiRowKey((Map<String, Object>)componentValues,
          getFormat());
    }

    /** {@inheritDoc} */
    @Override
    public EntityId fromHBaseRowKey(byte[] hbaseRowKey) {
      return FormattedEntityId.fromHBaseRowKey(hbaseRowKey, getFormat());
    }
  }

  /** Format of the row keys. */
  private final RowKeyFormat mFormat;

  /**
   * Creates an entity ID factory.
   *
   * @param format Format of the row keys.
   */
  public EntityIdFactory(RowKeyFormat format) {
    mFormat = Preconditions.checkNotNull(format);
  }

  /** @return the format of the row keys generated by this factory. */
  public RowKeyFormat getFormat() {
    return mFormat;
  }

  /**
   * Creates an entity ID from a Kiji row key.
   *
   * @param kijiRowKey A Kiji row key can be one of the following:
   *                   Raw EntityId: A String or byte array
   *                   Formatted EntityId: A map whose keys
   *                   are named components of the kiji Row key (as
   *                   specified in the "key_spec" in the layout file).
   * @return a new EntityId with the specified Kiji row key.
   */
  public abstract EntityId fromKijiRowKey(Object kijiRowKey);

  /**
   * Creates an entity ID from an HBase row key.
   *
   * @param hbaseRowKey HBase row key.
   * @return a new EntityId with the specified HBase row key.
   */
  public abstract EntityId fromHBaseRowKey(byte[] hbaseRowKey);
}
