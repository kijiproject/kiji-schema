#!/usr/bin/env bash
#
#   (c) Copyright 2012 WibiData, Inc.
#
#   See the NOTICE file distributed with this work for additional
#   information regarding copyright ownership.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#   The kiji script is the entry point to several tools for interacting with the kiji system.
#   Tools are run as:
#
#   bash> $KIJI_HOME/bin/kiji <tool-name> [options]
#
#   For full usage information, use:
#
#   bash> $KIJI_HOME/bin/kiji help
#

bin=`dirname $0`
bin=`cd ${bin} && pwd`

KIJI_HOME="${KIJI_HOME:-${bin}/../}"

# Any user code you want to add to the kiji classpath may be done via this env var.
KIJI_CLASSPATH=${KIJI_CLASSPATH:-""}

# Any arguments you want to pass to kiji's java may be done via this env var.
KIJI_JAVA_OPTS=${KIJI_JAVA_OPTS:-""}

# This is a workaround for OS X Lion, where a bug in JRE 1.6
# creates a lot of 'SCDynamicStore' errors.
if [ `uname` = "Darwin" ]; then
    KIJI_JAVA_OPTS="$KIJI_JAVA_OPTS -Djava.security.krb5.realm= -Djava.security.krb5.kdc="
fi

# An existing set of directories to use for the java.library.path property should
# be set with JAVA_LIBRARY_PATH.
JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH:-""}

java_opts=

# Try CDH defaults.
HBASE_HOME="${HBASE_HOME:-/usr/lib/hbase}"
HADOOP_HOME="${HADOOP_HOME:-/usr/lib/hadoop}"

# First make sure we have everything we need in the environment.
if [ -z $KIJI_HOME -o ! -d "$KIJI_HOME" ]; then
    echo "Please set your KIJI_HOME environment variable."
    exit 1
fi
if [ -z $HBASE_HOME -o ! -d "$HBASE_HOME" ]; then
    echo "Please set your HBASE_HOME environment variable."
    exit 1
fi
if [ -z $HADOOP_HOME -o ! -d "$HADOOP_HOME" ]; then
    echo "Please set your HADOOP_HOME environment variable."
    exit 1
fi

function print_tool_usage() {
  echo "The kiji script runs tools for interacting with the kiji system."
  echo
  echo "USAGE"
  echo
  echo "  kiji TOOL [FLAGS]..."
  echo
  echo "TOOLS"
  echo
  echo "  help                  - Display this help message. Use --verbose for more information."
  echo "  install               - Install a kiji instance onto a running hbase cluster."
  echo "  uninstall             - Remove a kiji instance from a running hbase cluster."
  echo "  version               - Print the kiji distribution and data versions in use."
  echo "  classpath             - Print the classpath used to run kiji tools."
  echo
  echo "  jar                   - Run a main class contained in a jar file."
  echo "                          Use: kiji jar <jarFile> <mainClass> [args...]"
  echo
  echo "  ls                    - List kiji instances, tables and rows."
  echo "  create-table          - Create a kiji table in a kiji instance."
  echo "  delete-table          - Delete a kiji table from a kiji instance."
  echo "  flush-table           - Flush kiji user and meta table write-ahead logs."
  echo "  layout                - View or modify kiji table layouts."
  echo
  echo "  increment             - Increment a counter column in a kiji table."
  echo "  put                   - Write a cell to a column in a kiji table."
  echo "  synthesize-user-data  - Synthesize user data into a kiji table."
  echo
  echo "FLAGS"
  echo
  echo "  The available flags depend on which tool you use.  To see"
  echo "  flags for a tool, use --help.  For example:"
  echo
  echo "  $ kiji TOOL --help"
}

function print_env_usage() {
  echo
  echo "ENVIRONMENT VARIABLES"
  echo
  echo "  Users can set several environment variables to change the behavior of the kiji script and"
  echo "  the tools it runs. These include:"
  echo
  echo "  KIJI_HOME           Should give the path to the root of the kiji distribution to use when"
  echo "                      executing tools. By default, the parent of the directory containing"
  echo "                      this script will be used (as this script is likely in the bin"
  echo "                      directory of a kiji distribution)."
  echo
  echo "  HADOOP_HOME         Should give the path to the root of the hadoop distribution to use"
  echo "                      when executing tools. By default, /usr/lib/hadoop will be used."
  echo
  echo "  HBASE_HOME          Should give the path to the root of the hbase distribution to use"
  echo "                      when executing tools. By default, /usr/lib/hbase will be used."
  echo
  echo "  KIJI_CLASSPATH      Should contain a colon-seperated list of paths to client libraries"
  echo "                      to place on the classpath of run tools. This is useful for when you"
  echo "                      run custom kiji programs that depend on libraries not provided by the"
  echo "                      kiji system. The libraries specified in KIJI_CLASSPATH will be"
  echo "                      placed first on the classpath so that they will take precedence over"
  echo "                      libraries provided by the kiji system. By default KIJI_CLASSPATH is"
  echo "                      empty."
  echo
  echo "  KIJI_JAVA_OPTS      Should contain extra arguments to pass to the JVM used to execute"
  echo "                      tools. By default, KIJI_JAVA_OPTS is empty."
  echo
  echo "  JAVA_LIBRARY_PATH   Should contain a colon-seperated list of paths to additional native"
  echo "                      libraries to pass to the JVM (through the java.library.path"
  echo "                      property). Note the kiji script will always pass the native libraries"
  echo "                      included with your hadoop distribution to the JVM. By default"
  echo "                      JAVA_LIBRARY_PATH is empty."
}

if [ -z $1 ]; then
    print_tool_usage
    exit 0
fi

# Removes classpath entries that match the given regexp (partial match, not full
# match).
function remove_classpath_entries() {
  local cp=$1
  local regex=$2

  echo $cp | sed "s/[^:]*$regex[^:]*/::/g" | sed 's/::*/:/g'
  return 0
}

# Helper to build classpaths correctly
function append_path() {
  if [ -z "$1" ]; then
    echo $2
  else
    echo $1:$2
  fi
}

# Scrubs classpaths of a given jar. Mutate will dig into *s, only mutating them
# if it finds the given jar.
# mutate_classpath scrubme.jar "$(hadoop classpath)"
function mutate_classpath () {

    local mutated_classpath
    local jar_to_scrub=$1
    shift

    # Stop expanding globs
    set -f
    IFS=: read -r -a classpath <<< $@

    for path in $classpath; do

        # If it ends with a glob we'll need to dig deeper for jars
        if [ "${path: -1:1}" = "*" ]; then

            set +f
            local expanded_classpath=$(JARS=(${path}.jar); IFS=:; echo "${JARS[*]}")
            set -f

            # If the expanded classpath contains the jar in question, we'll
            # scrub it later.
            if [[ $expanded_classpath =~ .*$jar_to_scrub.* ]]; then
                mutated_classpath=$(append_path $mutated_classpath $expanded_classpath)

            # If the expanded classpath doesn't contain the jar in question, use
            # the glob version to reduce clutter.
            else
                mutated_classpath=$(append_path $mutated_classpath $path)
            fi

        # No glob just use the path
        else
            mutated_classpath=$(append_path $mutated_classpath $path)
        fi
    done

    # Scrub all instances of the jar
    mutated_classpath=$(remove_classpath_entries "$mutated_classpath" "$jar_to_scrub")
    echo $mutated_classpath

    set +f
}


# Gather the kiji dependency jars.
libjars=
for jar in `ls $KIJI_HOME/lib/*.jar`; do
    libjars=$libjars:$jar
done

# Gather the HBase classpath.
hbase_cp=$($HBASE_HOME/bin/hbase classpath)
hbase_cp=$(mutate_classpath 'slf4j-log4j12' "$hbase_cp")

# Hadoop classpath
hadoop_cp=$($HADOOP_HOME/bin/hadoop classpath)
hadoop_cp=$(mutate_classpath 'slf4j-log4j12' "$hadoop_cp")

# Note that we put the libjars before the hbase jars, in case there are conflicts.
kiji_conf=$KIJI_HOME/conf
kiji_jar=$KIJI_HOME/lib/${project.build.finalName}.jar
# We put $KIJI_CLASSPATH at the beginning classpath to allow users to win when there are conflicts.
kiji_cp="$KIJI_CLASSPATH:$kiji_conf:$kiji_jar:$libjars:$hadoop_cp:$hbase_cp"

# Determine location of Hadoop native libraries and set java.library.path.
if [ -d "${HADOOP_HOME}/lib/native" ]; then
  JAVA_PLATFORM=`java -cp ${hadoop_cp} -Xmx32m org.apache.hadoop.util.PlatformName | sed -e "s/ /_/g"`
  if [ ! -z "$JAVA_LIBRARY_PATH" ]; then
    JAVA_LIBRARY_PATH="${JAVA_LIBRARY_PATH}:${HADOOP_HOME}/lib/native/${JAVA_PLATFORM}"
  else
    JAVA_LIBRARY_PATH="${HADOOP_HOME}/lib/native/${JAVA_PLATFORM}"
  fi
fi

command=$1
foreground=true # Run command in the foreground.
shift  # pop off the command

maybeDebugMode=$1
debugMode="no"
if [ "$maybeDebugMode" == "--debug" -o "$maybeDebugMode" == "-d" ]; then
  # Consume the "--debug" token, and set the logging level for
  # the underlying command.
  java_opts="-Dkiji.logger=DEBUG,console"
  debugMode="yes"
  shift
fi

case $command in
    help)
        print_tool_usage
        if [[ $1 == "--verbose" ]]; then
          print_env_usage
        fi
        exit 0
        ;;
    install)
        class=org.kiji.schema.tools.InstallTool
        ;;
    uninstall)
        class=org.kiji.schema.tools.UninstallTool
        ;;
    version)
        class=org.kiji.schema.tools.VersionTool
        ;;
    classpath)
        echo "$kiji_cp"
        exit 0
        ;;
    jar)
        if [[ $# > 0 && $1 == "--help" ]]; then
          echo "Usage: kiji jar <jarFile> <mainClass> [args...]"
          echo
          exit 0
        fi
        user_jar_file=$1
        class=$2
        shift
        shift
        if [ -z "$user_jar_file" ]; then
          echo "Error: no jar file specified."
          echo "Usage: kiji jar <jarFile> <mainClass> [args...]"
          exit 1
        fi
        if [ ! -f "$user_jar_file" ]; then
          echo "Error: Cannot find jar file $user_jar_file"
          echo "Usage: kiji jar <jarFile> <mainClass> [args...]"
          exit 1
        fi
        if [ -z "$class" ]; then
          echo "Error: no main class specified."
          echo "Usage: kiji jar <jarFile> <mainClass> [args...]"
          exit 1
        fi
        kiji_cp="${user_jar_file}:${kiji_cp}"
        ;;

    ls)
        class=org.kiji.schema.tools.LsTool
        ;;
    create-table)
        class=org.kiji.schema.tools.CreateTableTool
        ;;
    delete-table)
        class=org.kiji.schema.tools.DeleteTableTool
        ;;
    flush-table)
        class=org.kiji.schema.tools.FlushTableTool
        ;;
    layout)
        class=org.kiji.schema.tools.LayoutTool
        ;;

    increment)
        class=org.kiji.schema.tools.IncrementTool
        ;;
    put)
        class=org.kiji.schema.tools.PutTool
        ;;
    synthesize-user-data)
        class=org.kiji.schema.tools.SynthesizeUserDataTool
        ;;

esac

if [ -z $class ]; then
    echo "Unknown command: $command"
    echo "Try:"
    echo "  kiji help"
    exit 1
fi

export KIJI_JAVA_OPTS

if [ ! -z "$JAVA_LIBRARY_PATH" ]; then
  java_opts="$java_opts -Djava.library.path=$JAVA_LIBRARY_PATH"
fi

# Run it!

if $foreground ; then
  exec java -cp "$kiji_cp" $java_opts $KIJI_JAVA_OPTS $class "$@"
else
  nohup java -cp "$kiji_cp" $java_opts $KIJI_JAVA_OPTS $class "$@" \
      >/dev/null 2>&1 </dev/null &
fi
