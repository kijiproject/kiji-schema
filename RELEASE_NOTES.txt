

                              Kiji Schema Release Notes

Version 1.0.0-rc5
  * SCHEMA-233. Extract kiji get functionality out of kiji ls.
  * SCHEMA-242. Enforce constraint of no non-hashed components
      in a FORMATTED row key with SuppressKeyMaterialization=true.
  * SCHEMA-141. Improved KijiTablePool API.
  * SCHEMA-234. Extract kiji scan functionality out of kiji ls.
  * SCHEMA-219. Adds KijiWriterFactory with access in KijiTable and
      AtomicKijiPutter with access in KijiUtilityWriterFactory.
  * SCHEMA-103. Remove ColumnNameTranslator from public API.
  * SCHEMA-140. Update API for metatable backups. This changes the
      backup format. Please re-backup your tables using the new API.
  * SCHEMA-136. Make KijiRowKeySplitter a non-static class. Get an instance
      with the KijiRowKeySplitter.get() method.
  * SCHEMA-145. Change KijiColumnFilter.Context to abstract class.
  * SCHEMA-199. VALID_INSTANCE_NAME should not match the empty string.
  * SCHEMA-9. Add a CLI tool for KijiSchema System Table.
      supports putting and getting properties from the system table.
  * SCHEMA-198. KijiColumnName validates family names using
      KijiNameValidator. KijiInvalidNameException is unchecked.
  * SCHEMA-135. Clean up API for table layout backups. This changes the
      backup format. Please re-backup your tables using the new API.

Version 1.0.0-rc4
  * BENTO-15. When run within a BentoBox, the 'kiji' script will notify you
      of a new BentoBox version if one is available.
  * SCHEMA-218. Fix instance-listing capability in 'kiji ls'.
  * SCHEMA-67. Remove unused classes (CounterManager, NumberParser).
  * SCHEMA-197. Layout versions now use the "layout" namespace.
      Changes the expected layout format version to "layout-1.0" or
      "layout-1.1". This avoids a collision with instances, etc. All layouts
      in resources have had their version numbers changed to "layout-1.0" or
      "layout-1.1". Existing layouts with a 'kiji-1.0' version string are
      supported. "kiji version" will now show the minimum and maximum layout
      versions that this kiji version can recognize.
  * SCHEMA-211. Use "default" instance in default KijiURIBuilder.
  * SCHEMA-208. Make KijiURIException unchecked.
  * SCHEMA-201. Fix NPE in 'kiji install'.
  * SCHEMA-196. Instance format should not use "kiji" protocol namespace.
      Changes the instance format installed via 'kiji install' to
      'system-1.0', rather than 'kiji-1.0'. This avoids a namespace collision
      with layouts, etc. Existing deployments with a 'kiji-1.0' instance
      format are still supported.
  * SCHEMA-151. Add org.kiji.schema.util.ProtocolVersion to manage
      format/protocol version compatibility.
  * SCHEMA-150. Update CLI tools to support composite entity IDs.
      Entity IDs can now be specified as:
        --entity-id=hbase=hex:deadc0de as hexadecimal HBase keys
        --entity-id=hbase=[utf8:]'hbase\x0akey\x00' as UTF-8 encoded HBase keys
        --entity-id=[kiji=]'kiji-key' for raw, hashed or hash-prefixed Kiji keys
        --entity-id="['component1', 2, 'comp3']" for Kiji formatted row keys.
  * SCHEMA-151. Stricter checking of layout "version" fields for compatibility
      with supported layout features. VersionInfo.get(Client/Cluster)DataVersion()
      now return a ProtocolVersion, not a string.
  * SCHEMA-190. Removed KijiDataBuffer.
  * SCHEMA-27. Add timestamp-related constants to KConstants:
      KConstants.BEGINNING_OF_TIME = 0
      KConstants.END_OF_TIME = Long.MAX_VALUE
  * SCHEMA-3. Add support for composite entity ids. You can now create
      compound keys containing a mix of hashed, string, integer, and null
      components.
  * SCHEMA-175. kiji script can now use tools provided by kiji-mapreduce. To make
      kiji-mapreduce tools available for use through the kiji script, make sure
      the environment variable KIJI_MR_HOME is set to the path to a kiji-mapreduce
      distribution.
  * SCHEMA-153. Adds a getRegions() method to KijiTable. Returns logical
      region divisions in a kiji table.
  * SCHEMA-119. Remove TableLayoutSerializer class.
  * SCHEMA-147. Hide OperatorRowFilter. You should use AndRowFilter or
      OrRowFilter directly.
  * SCHEMA-118. KijiTableLayout constructors are now hidden. Create a new layout
      with KijiTableLayout.newLayout(TableLayoutDesc) or create one updated from
      an old one with KijiTableLayout.createUpdatedLayout(TableLayoutDesc,
      KijiTableLayout).
  * SCHEMA-10. CLI tools use KijiURIs:
      - "kiji ls" flags --instances and --table are remove and inferred
        from URI in --kiji=kiji://...
      - flag --table is no longer present; it is superseeded by the table
        component from Kiji URIs.
  * SCHEMA-123. Removed spin-wait from deleteTable in HBaseKiji.
  * SCHEMA-169. Add KijiPager class that allows users to easily paginate and
      iterate over values from a column while reading from a KijiTable.
  * SCHEMA-99. KijiConfiguration removed. Use a KijiURI paired with a
      Hadoop Configuration object instead:

      KijiURI uri = KijiURI.newBuilder().withInstanceName("default")
          .withTableName("myTable").build();
  * SCHEMA-155. Merged methods in KijiAdmin into Kiji.
  * SCHEMA-133. Introduce KijiDataRequestBuilder class. KijiDataRequest
      objects are now immutable. Construct one with KijiDataRequest.create(),
      or call KijiDataRequest.builder() to get a KijiDataRequestBuilder.
  * SCHEMA-102. Removed overloaded variety of toHBaseFilter that accepted a
      ColumnNameTranslator.
  * SCHEMA-131. Move HBase classes to org.kiji.schema.hbase.
  * SCHEMA-82. KijiCell is now the uniquely located cell in a table with
      family, qualifier, and timestamp.  KijiCounters no longer exist and
      are represented as KijiCell<Long> with no writer schema instead.
  * SCHEMA-143. KijiURI constructors are now hidden.  KijiURIs should be built
      with KijiURIBuilders.
  * SCHEMA-109. KijiInstaller is no longer static.  Get an instance of it with
      KijiInstaller.get().

Version 1.0.0-rc3
  * SCHEMA-83. Added containsCell method to KijiRowData.
  * SCHEMA-154. KijiAdmin is now an interface. Use Kiji.getAdmin() to
      get an instance.
  * SCHEMA-105. Hide KijiColumnPager from public API.
  * SCHEMA-127. Command-line tools --confirm is replaced with --interactive,
      which suppresses yes/no prompts if false.
  * SCHEMA-142. KijiTableReader.getScanner() now takes a KijiScannerOptions
      argument as configuration.
  * SCHEMA-50. Kiji.close() is replaced by Kiji.retain() and Kiji.release().
      Kiji instances are created with a reference count of 1. Use the retain()
      method to increase this reference count, if another consumer holds a
      reference to this object.

      You should call release(), or ReferenceCountableUtils.releaseQuietly()
      before discarding the reference. Instances are closed when the reference
      count hits zero.
  * SCHEMA-97. org.kiji.schema.Kiji is now an interface, not a class.
      Use Kiji.Factory.open() to get a Kiji instance.
  * SCHEMA-157. Add KijiTable.getURI().
  * SCHEMA-159. Fixes a bug where KijiRowData.getValues() would return values
      in the wrong order.
  * SCHEMA-128. Add minPoolSize option to KijiTablePool. Kiji will aggressively
      open the min number of connections the first time a table connection is
      requested and will maintain at least that size of a pool indefinitely.
  * SCHEMA-17. DeleteTool replaces and improves DeleteTableTool.
      `kiji delete-table` has been removed. See `kiji delete --help` for
      instructions on using this tool, which can delete rows / cells in addition
      to tables.
  * SCHEMA-129. KijiTableReader converted to an interface. Use
      KijiTable.openTableReader() to get an instance of KijiTableReader for a
      given table.
  * SCHEMA-114. Fix NullPointerException in `kiji install`.
  * SCHEMA-20. Improve validation of cell schema changes.
      - Counters must specify schema storage 'final'.
      - Final columns require inline schema specifications and cannot change.
      - Schema storage cannot be modified.
  * SCHEMA-113. Bugfix: `kiji metadata` command reports an incorrect usage message.
  * SCHEMA-1. Writes through KijiTableWriter are validated against common reader schema.
  * SCHEMA-111. Adds RELEASE_NOTES.txt
  * SCHEMA-90. KijiURIException subclasses IOException.
  * SCHEMA-13. Removed HBaseTableRecordReader from public API.

Version 1.0.0-rc2
  * SCHEMA-93. Deprecate the org.kiji.schema.mapreduce package. This marks
      classes in this package as @Deprecated in preparation for the eventual
      release of KijiMapReduce.
  * SCHEMA-52. Initial effort at multiple Hadoop version support. While
      MapReduce code requires CDH4, non-MR-based operations provided by
      KijiSchema can be performed with both CDH4 or Apache Hadoop 1.0
      and HBase 0.92.1.
  * SCHEMA-60. Multiple platform profiles for KijiSchema. To facilitate
      multiple Hadoop version support in Kiji, your project must now
      explicitly declare a reference to the underlying Hadoop distribution.
      Specifically, put this in your pom.xml file to continue working with
      CDH4:
      <dependency>
        <groupId>org.kiji.platforms</groupId>
        <artifactId>kiji-cdh4-platform</artifactId>
        <version>1.0.0-rc2</version>
        <scope>provided</scope>
      </dependency>
      See https://github.com/kijiproject/kiji-platforms/blob/master/README.md
      for a full list of available platforms.
  * SCHEMA-7. Add metadata backup and restore tools ('kiji metadata')
  * SCHEMA-28. Removed KijiDataWrapper and its subclasses. This change
      refactors large parts of KijiSchema and has several incompatible
      changes associated with it:
      ** KijiURIs are now used more pervasively to reference Kiji instance
         and table names. KijiConfiguration is deprecated; you should open
         Kiji instances through KijiURIs.
      ** KijiCellEncoder and KijiCellDecoder were significantly revamped.
      ** KijiTable is now an interface.
      ** Interaction between Kiji, KijiTable, and KijiTableReader/Writer
         reworked. See the javadoc for the Kiji.open() and
         KijiTable.openTableReader() / openTableWriter() methods.
      ** KijiTableWriter was significantly simplified. You no longer need to
         specify the schema when writing to a cell; the schema is induced from
         the type when you write. The forms of the put() method where schemas
         are specified have been removed.
      ** KijiTableReader and KijiRowData have been significantly simplified.
         You no longer need to explicitly specify the type when you read a cell
         (e.g., via getStringValue()). Methods like getIntValue(),
         getStringValues(), etc. have been removed. Instead, a universal
         getMostRecentValue() method can now use type inference in combination
         with the default reader schema specified in the table's layout to
         deserialize the data with the correct type signature.
  * SCHEMA-40. Add audience annotations to classes. Provisional annotations
      have been added to indicate whether classes are intended for use by all
      clients, other framework modules, or only the current module.
      See github.com/kijiproject/annotations for more documentation.
      Related to this, several classes have been made 'final', to prevent end
      users from extending them.
  * SCHEMA-51. Use Kiji artifacts, not odiago/wibi artifacts.
  * SCHEMA-43. bugfix: bin-script cannot be directly symlinked.
  * SCHEMA-36. kiji-schema jar is now always added to the front of the
      classpath.
  * SCHEMA-34. Handle general exceptions more gracefully in Kiji tools.

